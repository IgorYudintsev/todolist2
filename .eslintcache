[{"D:\\Programer\\IT-Incubator\\todolist2\\src\\stories\\todolists-api.stories.tsx":"1","D:\\Programer\\IT-Incubator\\todolist2\\src\\index.tsx":"2","D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\store.ts":"3","D:\\Programer\\IT-Incubator\\todolist2\\src\\EditableSpan.tsx":"4","D:\\Programer\\IT-Incubator\\todolist2\\src\\api\\todolist-api.ts":"5","D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\todolists-reducer.ts":"6","D:\\Programer\\IT-Incubator\\todolist2\\src\\Todolist.tsx":"7","D:\\Programer\\IT-Incubator\\todolist2\\src\\reportWebVitals.ts":"8","D:\\Programer\\IT-Incubator\\todolist2\\src\\AddItemForm.tsx":"9","D:\\Programer\\IT-Incubator\\todolist2\\src\\Task.tsx":"10","D:\\Programer\\IT-Incubator\\todolist2\\src\\App.tsx":"11","D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\tasks-reducer.ts":"12"},{"size":3054,"mtime":1612359333831,"results":"13","hashOfConfig":"14"},{"size":641,"mtime":1611420546000,"results":"15","hashOfConfig":"14"},{"size":1034,"mtime":1617461713907,"results":"16","hashOfConfig":"14"},{"size":952,"mtime":1594154724000,"results":"17","hashOfConfig":"14"},{"size":3450,"mtime":1617539022206,"results":"18","hashOfConfig":"14"},{"size":3438,"mtime":1617523833835,"results":"19","hashOfConfig":"14"},{"size":3660,"mtime":1617465762945,"results":"20","hashOfConfig":"14"},{"size":425,"mtime":1607869388000,"results":"21","hashOfConfig":"14"},{"size":1474,"mtime":1594727720000,"results":"22","hashOfConfig":"14"},{"size":1603,"mtime":1594154664000,"results":"23","hashOfConfig":"14"},{"size":4961,"mtime":1617539607293,"results":"24","hashOfConfig":"14"},{"size":5884,"mtime":1617542734986,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qch34g",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"D:\\Programer\\IT-Incubator\\todolist2\\src\\stories\\todolists-api.stories.tsx",["57","58","59"],"D:\\Programer\\IT-Incubator\\todolist2\\src\\index.tsx",[],["60","61"],"D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\store.ts",[],"D:\\Programer\\IT-Incubator\\todolist2\\src\\EditableSpan.tsx",[],"D:\\Programer\\IT-Incubator\\todolist2\\src\\api\\todolist-api.ts",[],"D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\todolists-reducer.ts",["62"],"import {v1} from 'uuid';\r\nimport {FilterValuesType, TodolistType} from '../App';\r\nimport {todoApi, TodoType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS': {\r\n            return action.todos.map((m) => {\r\n                return {...m, filter: 'all'} //в наш массив объектов из сервака добавляем свойство filter:'all'\r\n            })\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todos: Array<TodoType>) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos: todos\r\n    } as const\r\n}\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport const setTodocTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    todoApi.getTodos()\r\n        .then((res) => {\r\n            let todos = res.data;\r\n            dispatch(setTodolistsAC(todos))\r\n        })\r\n}\r\n\r\n","D:\\Programer\\IT-Incubator\\todolist2\\src\\Todolist.tsx",["63","64","65","66","67","68"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {FilterValuesType} from './App';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    let dispatch=useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.id));\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\Programer\\IT-Incubator\\todolist2\\src\\reportWebVitals.ts",[],["69","70"],"D:\\Programer\\IT-Incubator\\todolist2\\src\\AddItemForm.tsx",["71","72","73"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Programer\\IT-Incubator\\todolist2\\src\\Task.tsx",["74","75","76"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Programer\\IT-Incubator\\todolist2\\src\\App.tsx",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"D:\\Programer\\IT-Incubator\\todolist2\\src\\state\\tasks-reducer.ts",["93","94"],"import {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TasksStateType} from '../App';\r\nimport {Dispatch} from \"redux\";\r\nimport {getTaskType, todoApi, UpdateTaskType} from \"../api/todolist-api\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: getTaskType\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | setTasksACType\r\n\r\nconst initialState: TasksStateType = {}\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS': {\r\n            let copyState = {...state};\r\n            action.todos.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            let copyState = {...state};\r\n            copyState[action.todoId] = action.tasks;\r\n            return copyState\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            // const newTask: TaskType = {\r\n            //     id: v1(),\r\n            //     title: action.title,\r\n            //     isDone: false\r\n            // }\r\n            // debugger\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = (task: getTaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = ( todolistId: string,taskId: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS',  todolistId, taskId,isDone}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (todoId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: \"SET-TASKS\",\r\n        todoId,\r\n        tasks\r\n    } as const\r\n}\r\nexport type setTasksACType = ReturnType<typeof setTasksAC>\r\n\r\nexport const fetchTasksTC = (todoId: string) => (dispatch: Dispatch) => {\r\n    todoApi.getTasks(todoId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            console.log(res.data)\r\n            dispatch(setTasksAC(todoId, tasks))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    todoApi.createNewTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            // @ts-ignore\r\n            const task: getTaskType = res.data.data.item\r\n            dispatch(addTaskAC(task));\r\n        })\r\n}\r\n\r\nexport const updateTaskTaskStatusTC = (todolistId: string, taskId: string, isDone:boolean) => (dispatch: Dispatch,getState:()=>AppRootStateType) => {\r\n   let state=getState();\r\n   let task=state.tasks;\r\n   let taskForCurrentTodolist=task[todolistId];\r\n   //@ts-ignore\r\n    const currentTask:UpdateTaskType=taskForCurrentTodolist.find((el)=>{\r\n        return el.id===taskId\r\n    })\r\n   if(currentTask){\r\n       todoApi.UpdateTask(todolistId, taskId, {\r\n           status:isDone,\r\n           title:currentTask.title,\r\n           startDate:currentTask.startDate,\r\n           priority:currentTask.priority,\r\n           description:currentTask.description,\r\n           deadline:currentTask.deadline\r\n       })\r\n           .then((res) => {\r\n               const action = changeTaskStatusAC(todolistId,taskId, isDone );\r\n               dispatch(action);\r\n           })\r\n   }\r\n\r\n}\r\n//UpdateTaskType",{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"99","severity":1,"message":"100","line":5,"column":1,"nodeType":"101","endLine":7,"endColumn":2},{"ruleId":"95","severity":1,"message":"102","line":8,"column":7,"nodeType":"97","messageId":"98","endLine":8,"endColumn":15},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":40,"column":45,"nodeType":"109","messageId":"110","endLine":40,"endColumn":47},{"ruleId":"111","severity":1,"message":"112","line":34,"column":7,"nodeType":"113","endLine":34,"endColumn":9,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"115","line":38,"column":8,"nodeType":"113","endLine":38,"endColumn":33,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"115","line":45,"column":8,"nodeType":"113","endLine":45,"endColumn":45,"suggestions":"117"},{"ruleId":"111","severity":1,"message":"115","line":47,"column":86,"nodeType":"113","endLine":47,"endColumn":116,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"115","line":48,"column":92,"nodeType":"113","endLine":48,"endColumn":122,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"115","line":49,"column":98,"nodeType":"113","endLine":49,"endColumn":128,"suggestions":"120"},{"ruleId":"103","replacedBy":"121"},{"ruleId":"105","replacedBy":"122"},{"ruleId":"95","severity":1,"message":"123","line":2,"column":9,"nodeType":"97","messageId":"98","endLine":2,"endColumn":12},{"ruleId":"95","severity":1,"message":"124","line":2,"column":14,"nodeType":"97","messageId":"98","endLine":2,"endColumn":20},{"ruleId":"95","severity":1,"message":"125","line":2,"column":22,"nodeType":"97","messageId":"98","endLine":2,"endColumn":33},{"ruleId":"111","severity":1,"message":"115","line":15,"column":97,"nodeType":"113","endLine":15,"endColumn":130,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"115","line":20,"column":8,"nodeType":"113","endLine":20,"endColumn":41,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"115","line":24,"column":8,"nodeType":"113","endLine":24,"endColumn":41,"suggestions":"128"},{"ruleId":"95","severity":1,"message":"129","line":1,"column":40,"nodeType":"97","messageId":"98","endLine":1,"endColumn":50},{"ruleId":"95","severity":1,"message":"130","line":1,"column":52,"nodeType":"97","messageId":"98","endLine":1,"endColumn":60},{"ruleId":"95","severity":1,"message":"131","line":4,"column":9,"nodeType":"97","messageId":"98","endLine":4,"endColumn":11},{"ruleId":"95","severity":1,"message":"132","line":12,"column":35,"nodeType":"97","messageId":"98","endLine":12,"endColumn":49},{"ruleId":"95","severity":1,"message":"133","line":13,"column":5,"nodeType":"97","messageId":"98","endLine":13,"endColumn":21},{"ruleId":"95","severity":1,"message":"134","line":16,"column":5,"nodeType":"97","messageId":"98","endLine":16,"endColumn":14},{"ruleId":"95","severity":1,"message":"135","line":18,"column":5,"nodeType":"97","messageId":"98","endLine":18,"endColumn":23},{"ruleId":"95","severity":1,"message":"136","line":21,"column":5,"nodeType":"97","messageId":"98","endLine":21,"endColumn":17},{"ruleId":"111","severity":1,"message":"137","line":45,"column":8,"nodeType":"113","endLine":45,"endColumn":10,"suggestions":"138"},{"ruleId":"111","severity":1,"message":"139","line":51,"column":8,"nodeType":"113","endLine":51,"endColumn":10,"suggestions":"140"},{"ruleId":"111","severity":1,"message":"139","line":56,"column":8,"nodeType":"113","endLine":56,"endColumn":10,"suggestions":"141"},{"ruleId":"111","severity":1,"message":"139","line":60,"column":8,"nodeType":"113","endLine":60,"endColumn":10,"suggestions":"142"},{"ruleId":"111","severity":1,"message":"139","line":65,"column":8,"nodeType":"113","endLine":65,"endColumn":10,"suggestions":"143"},{"ruleId":"111","severity":1,"message":"139","line":70,"column":8,"nodeType":"113","endLine":70,"endColumn":10,"suggestions":"144"},{"ruleId":"111","severity":1,"message":"139","line":75,"column":8,"nodeType":"113","endLine":75,"endColumn":10,"suggestions":"145"},{"ruleId":"111","severity":1,"message":"139","line":80,"column":8,"nodeType":"113","endLine":80,"endColumn":10,"suggestions":"146"},{"ruleId":"95","severity":1,"message":"131","line":2,"column":9,"nodeType":"97","messageId":"98","endLine":2,"endColumn":11},{"ruleId":"107","severity":1,"message":"108","line":56,"column":53,"nodeType":"109","messageId":"110","endLine":56,"endColumn":55},"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'settings' is assigned a value but never used.","no-native-reassign",["147"],"no-negated-in-lhs",["148"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["149"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["150"],["151"],["152"],["153"],["154"],["147"],["148"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["155"],["156"],["157"],"'useReducer' is defined but never used.","'useState' is defined but never used.","'v1' is defined but never used.","'setTodolistsAC' is defined but never used.","'todolistsReducer' is defined but never used.","'addTaskAC' is defined but never used.","'changeTaskStatusAC' is defined but never used.","'tasksReducer' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["158"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["159"],["160"],["161"],["162"],["163"],["164"],["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"168","fix":"171"},{"desc":"168","fix":"172"},{"desc":"168","fix":"173"},{"desc":"168","fix":"174"},{"desc":"168","fix":"175"},{"desc":"168","fix":"176"},{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"177","fix":"180"},{"desc":"177","fix":"181"},{"desc":"177","fix":"182"},{"desc":"177","fix":"183"},{"desc":"177","fix":"184"},{"desc":"177","fix":"185"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"186","text":"187"},"Update the dependencies array to be: [props]",{"range":"188","text":"189"},{"range":"190","text":"189"},{"range":"191","text":"189"},{"range":"192","text":"189"},{"range":"193","text":"189"},{"range":"194","text":"189"},{"range":"195","text":"189"},{"range":"196","text":"189"},"Update the dependencies array to be: [dispatch]",{"range":"197","text":"198"},{"range":"199","text":"198"},{"range":"200","text":"198"},{"range":"201","text":"198"},{"range":"202","text":"198"},{"range":"203","text":"198"},{"range":"204","text":"198"},{"range":"205","text":"198"},[1242,1244],"[dispatch, props.id]",[1350,1375],"[props]",[1588,1625],[1715,1745],[1839,1869],[1969,1999],[693,726],[955,988],[1145,1178],[1433,1435],"[dispatch]",[1610,1612],[1811,1813],[1996,1998],[2210,2212],[2414,2416],[2566,2568],[2750,2752]]